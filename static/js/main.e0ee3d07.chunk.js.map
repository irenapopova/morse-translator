{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","translateText","e","code","a","b","c","d","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","1","2","3","4","5","6","7","8","9","0",".",",","?","'","!","/","(",")","&",":",";","=","+","-","_","\"","$","@"," ","\n","insertedInput","target","value","morseText","length","toLowerCase","setState","translatedText","state","react_default","createElement","className","action","htmlFor","type","cols","rows","onKeyUp","ref","placeholder","readOnly","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAmEeA,cA9DX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,cAAgB,SAACC,GAkBb,IAjBA,IAAMC,EAAO,CACTC,EAAE,KAAMC,EAAE,OAAQC,EAAE,OAAQC,EAAE,MAAOL,EAAE,IAAKM,EAAE,OAAQC,EAAE,MACxDC,EAAE,OAAQC,EAAE,KAAMC,EAAE,OAAQC,EAAE,MAAOC,EAAE,OAAQC,EAAE,KAAMC,EAAE,KACzDC,EAAE,MAAOC,EAAE,OAAQC,EAAE,OAAQC,EAAE,MAAOC,EAAE,MAAOC,EAAE,IAAKC,EAAE,MACxDC,EAAE,OAAQC,EAAE,MAAOC,EAAE,OAAQC,EAAE,OAAQC,EAAE,OACzCC,EAAE,QAASC,EAAE,QAASC,EAAE,QAASC,EAAE,QAASC,EAAE,QAC9CC,EAAE,QAASC,EAAE,QAASC,EAAE,QAASC,EAAE,QAASC,EAAE,SAC9CC,IAAK,SAAUC,IAAK,SAAUC,IAAK,SAAUC,IAAK,SAClDC,IAAK,SAAUC,IAAK,QAASC,IAAK,QAASC,IAAK,SAChDC,IAAK,QAASC,IAAK,SAAUC,IAAK,SAAUC,IAAK,QACjDC,IAAK,QAASC,IAAK,SAAUC,EAAK,SAAUC,IAAK,SACjDC,EAAK,UAAWC,IAAK,SAAUC,IAAK,IAAKC,KAAM,MAG/CC,EAAgBzD,EAAE0D,OAAOC,MACzBC,EAAY,GAEPnD,EAAI,EAAGA,EAAIgD,EAAcI,OAAQpD,IACtCmD,GAAa,IAAM3D,EAAKwD,EAAchD,GAAGqD,eAG7CtE,EAAKuE,SAAS,CACVC,eAAgBJ,KA5BpBpE,EAAKyE,MAAQ,CACTD,eAAgB,IAHNxE,wEAoClB,OAEE0E,EAAAhE,EAAAiE,cAAA,OAAKC,UAAU,aACXF,EAAAhE,EAAAiE,cAAA,gCACAD,EAAAhE,EAAAiE,cAAA,QAAMC,UAAU,OAAOC,OAAO,cAC1BH,EAAAhE,EAAAiE,cAAA,OAAKC,UAAU,aACXF,EAAAhE,EAAAiE,cAAA,SAAOG,QAAQ,WAAf,kBACAJ,EAAAhE,EAAAiE,cAAA,YAAUI,KAAK,OAAOC,KAAK,KAAKC,KAAK,IAC3BC,QAAS/E,KAAKI,cACd4E,IAAI,YACJC,YAAY,4BAE1BV,EAAAhE,EAAAiE,cAAA,OAAKC,UAAU,aACXF,EAAAhE,EAAAiE,cAAA,SAAOG,QAAQ,SAAf,mBACAJ,EAAAhE,EAAAiE,cAAA,YAAUI,KAAK,OAAOC,KAAK,KAAKC,KAAK,IAC3BG,YAAY,4BACZjB,MAAOhE,KAAKsE,MAAMD,eAClBa,UAAQ,cAvDlBC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAhE,EAAAiE,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0ee3d07.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            translatedText: ''\n        };\n    }\n\n    translateText = (e) => {\n        const code = {\n            a:\".-\", b:\"-...\", c:\"-.-.\", d:\"-..\", e:\".\", f:\"..-.\", g:\"--.\",\n            h:\"....\", i:\"..\", j:\".---\", k:\"-.-\", l:\".-..\", m:\"--\", n:\"-.\",\n            o:\"---\", p:\".--.\", q:\"--.-\", r:\".-.\", s:\"...\", t:\"-\", u:\"..-\",\n            v:\"...-\", w:\".--\", x:\"-..-\", y:\"-.--\", z:\"--..\",\n            1:\".----\", 2:\"..---\", 3:\"...--\", 4:\"....-\", 5:\".....\",\n            6:\"-....\", 7:\"--...\", 8:\"---..\", 9:\"----.\", 0:\"------\",\n            '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.',\n            '!': '-.-.--', '/': '-..-.', '(': '-.--.', ')': '-.--.-',\n            '&': '.-...', ':': '---...', ';': '-.-.-.', '=': '-...-',\n            '+': '.-.-.', '-': '-....-', '_': '..--.-', '\"': '.-..-.',\n            '$': '...-..-', '@': '.--.-.', ' ': ' ', '\\n': '\\n'\n        };\n\n        let insertedInput = e.target.value;\n        let morseText = '';\n\n        for (let i = 0; i < insertedInput.length; i++) {\n            morseText += ' ' + code[insertedInput[i].toLowerCase()];\n        }\n\n        this.setState({\n            translatedText: morseText\n        });\n    };\n\n    render() {\n\n    return (\n\n      <div className=\"translate\">\n          <h3>Translate to Morse</h3>\n          <form className=\"form\" action=\"index.html\">\n              <div className=\"translate\">\n                  <label htmlFor=\"letters\">Input Message:</label>\n                  <textarea type=\"text\" cols=\"50\" rows=\"8\"\n                            onKeyUp={this.translateText}\n                            ref=\"inputText\"\n                            placeholder=\"Type your message here\"/>\n              </div>\n              <div className=\"translate\">\n                  <label htmlFor=\"morse\">Output Message:</label>\n                  <textarea type=\"text\" cols=\"50\" rows=\"8\"\n                            placeholder=\"Here comes the Morse code\"\n                            value={this.state.translatedText}\n                            readOnly />\n              </div>\n          </form>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}